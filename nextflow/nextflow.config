// default params
params.cpus = 1
params.vcf = null
params.input = params.vcf
params.vep_config = null
params.filters = null
params.outdir = "outdir"
params.output_prefix = ""
params.bin_size = 100
params.sort = false
params.help = false
params.vep_version = 'latest'

//Â Check available VEP versions from Docker Hub
vep_docker_tag = null
if (params.vep_version) {
  vep_docker_tag = params.vep_version == 'latest' ? 'latest' : "release_${params.vep_version}"
  vep_docker = "ensemblorg/ensembl-vep:${vep_docker_tag}"

  if (vep_docker_tag != 'latest') {
    ANSI_RED    = "\u001B[31m"
    ANSI_YELLOW = "\u001B[33m"
    ANSI_RESET  = "\u001B[0m"

    // Raise error message if there are issues getting the image
    url = "https://hub.docker.com/v2/namespaces/ensemblorg/repositories/ensembl-vep/tags/${vep_docker_tag}"
    con = new URL(url).openConnection()
    status = con.responseCode
    if (status != 200) {
      msg = status == 404 ?
        "image ${vep_docker} not found on Docker Hub" :
        con.errorStream.text
      System.err.println "\n" + ANSI_RED + "ERROR: " + msg + ANSI_RESET

      // Warn if --vep_version does not contain VEP subversion
      if ( params.vep_version ==~ /^\d+$/ ) {
        msg = "Make sure you are including the VEP subversion in your command, such as: --vep_version ${params.vep_version}.0"
        System.err.println ANSI_RED + msg.indent(0) + ANSI_RESET
      }
      System.exit 1
    }
    System.out.println ANSI_YELLOW + "Using image ${vep_docker}" + ANSI_RESET
  }
}

process {
  cpus = 1
  memory = '4GB'
  time = '8h'

  withLabel: bcftools {
    container = 'quay.io/biocontainers/bcftools:1.13--h3a49de5_0'
  }

  withLabel: vep {
    container = vep_docker
  }
}

profiles {
  standard {
    process.executor = 'local'
  }
  lsf {
    process.executor = 'lsf'
  }
  slurm {
    process.executor = 'slurm'
  }
  conda {
    conda.enabled          = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  mamba {
    conda.enabled          = true
    conda.useMamba         = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  docker {
    docker.enabled         = true
    docker.userEmulation   = true
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  arm {
    docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true
    docker.enabled         = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  podman {
    podman.enabled         = true
    docker.enabled         = false
    singularity.enabled    = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  shifter {
    shifter.enabled        = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    charliecloud.enabled   = false
  }
  charliecloud {
    charliecloud.enabled   = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
  }
  gitpod {
    executor.name          = 'local'
    executor.cpus          = 16
    executor.memory        = 60.GB
  }
  ensembl {
    singularity {
      enabled    = true
      autoMounts = true
    }
    process {
      executor = 'slurm'
      errorStrategy = 'terminate'
      withName:runVEP {
        memory = '32GB'
      }
    }
  }
}

def tracedir = 'reports'
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'Ensembl VEP'
    author          = 'Ensembl'
    homePage        = 'https://github.com/Ensembl/ensembl-vep'
    description     = 'The Ensembl Variant Effect Predictor predicts the functional effects of genomic variants'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = 'release/113.0'
    doi             = '10.1186/s13059-016-0974-4'
}
